~SA PRAC Guideline

~eclipse 2022-06 java & web version

*****Socket programming steps:
->start eclipse->new java web project
->install apache 7.0
->runtime 2.5
->create 2 classes DSender & DReceiver
->enter code DSender

import java.net.*;
import java.util.*;
public class DSender{
public static void main(String[] args) throws Exception {
Scanner scn= new Scanner(System.in);
System.out.println("Enter your message: ");
String str= scn.nextLine();
DatagramSocket ds = new DatagramSocket();
InetAddress ip = InetAddress.getByName("127.0.0.1");
DatagramPacket dp = new DatagramPacket(str.getBytes(), str.length(), ip, 3000);
ds.send(dp);
ds.close();
System.out.println("Message has been sent to Receiver Class Please Check : "+ str); 
}
}

->enter code DReceiver

import java.net.*;
public class DReceiver{
public static void main(String[] args) throws Exception {
System.out.println("Waiting for Sender to send the Message");
DatagramSocket ds = new DatagramSocket(3000);
byte[] buf = new byte[1024];
DatagramPacket dp = new DatagramPacket(buf, 1024);
ds.receive(dp);
String str = new String(dp.getData(), 0, dp.getLength());
System.out.println(str);
ds.close();
System.out.println("Message received successfully");
}
}

->run receiver
->run sender
->enter message
->enter


*****File writing steps:
->start eclipse->new java project
->create package "pkg_file"
->create class "fileWrite"
->enter code

package pkg_file;
import java.io.File;  // Import the File class
import java.io.FileWriter;
import java.io.IOException;  // Import the IOException class to handle errors

public class fileWrite {
  public static void main(String[] args) {
    try {
      
      File myObj = new File("C:\\Users\\anany\\alahambra.txt");
      if (myObj.createNewFile()) {
        System.out.println("File created: " + myObj.getName());
      } else {
        System.out.println("File already exists.");
      }
      FileWriter myWriter = new FileWriter(myObj);
      myWriter.write("Hello! How are you today?");
      myWriter.close();
      System.out.println("Successfully wrote to the file.");
    } catch (IOException e) {
      System.out.println("An error occurred.");
      e.printStackTrace();
    }
  }
}

->change directory path
->enter file content
->run
->check directory
->check file content


*****JAVA RMI Steps:
->create java project
->create package pkg_RMI
->create interface RMI_interface
->enter code

package pkg_RMI;
import java.rmi.Remote;
import java.rmi.RemoteException;
public interface RMI_interface extends Remote{
	
	public void displayMessage() throws RemoteException;
}


->create class RMI_server
->enter code

import java.rmi.server.UnicastRemoteObject;
import java.rmi.AlreadyBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
public class RMI_server extends UnicastRemoteObject implements RMI_interface{

	public RMI_server() throws RemoteException {
		super();
	}
	public static void main(String[] args)throws RemoteException, AlreadyBoundException {
		try {
			Registry registry = LocateRegistry.createRegistry(1878);
			registry.bind("hello", new RMI_server());
			System.out.println("The RMI_Server is running and ready...");
		} 
		catch (Exception e) {
			System.out.println("The RMI_Server is not running...");
		} 
	}
	@Override
	public void displayMessage()throws RemoteException{
		System.out.println("----------------------------------------------");
		System.out.println("Hello Drashti!");
System.out.println("----------------------------------------------");	
	}
}

->create class RMI_client
->enter code

import java.net.MalformedURLException;
import java.rmi.RemoteException;
import java.rmi.NotBoundException;
import java.rmi.Naming;
public class RMI_client {
	public static void main(String[] args) throws MalformedURLException, RemoteException, NotBoundException{
		try {
			RMI_interface helloAPI = (RMI_interface) Naming.lookup("rmi://localhost:1878/hello");
			helloAPI.displayMessage();
		}
		catch(Exception e)
		{
			System.out.println("The RMI APP is not running...");
			e.printStackTrace();
		}
	}
}

->run server
->run client


**Addition**

public class AdditionCalculator {
    public static int add(int num1, int num2) {
        return num1 + num2;
    }

** Subtraction**

public class SubtractionCalculator {
    public static int subtract(int num1, int num2) {
        return num1 - num2;
    }
}

**Multiply**

public class MultiplicationCalculator {
    public static int multiply(int num1, int num2) {
        return num1 * num2;
    }
}

**Factorial**

public class FactorialCalculator {
    public static int factorial(int n) {
        if (n == 0) {
            return 1;
        }
        return n * factorial(n - 1);
    }
}

**Palindrome**

public class PalindromeChecker {
    public static boolean isPalindrome(int number) {
        String numStr = Integer.toString(number);
        int left = 0;
        int right = numStr.length() - 1;

        while (left < right) {
            if (numStr.charAt(left) != numStr.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }

        return true;
    }
}

**String equality**

public class StringEqualityChecker {
    public static boolean areStringsEqual(String str1, String str2) {
        return str1.equals(str2);
    }
}

--------------------------------

public class StringEqualityChecker {
    public static String areStringsEqual(String str1, String str2) {
        if (str1.equals(str2)) {
            return "The strings are equal.";
        } else {
            return "The strings are not equal.";
        }
    }
}

**String concatenation**

public class StringConcatenator {
    public static String concatenateStrings(String str1, String str2) {
        return str1 + str2;
    }
}

----- IP address of your own machine in Java by using the InetAddress class. 

import java.net.InetAddress;
import java.net.UnknownHostException;

public class GetIPAddress {
    public static void main(String[] args) {
        try {
            InetAddress localhost = InetAddress.getLocalHost();
            String ip = localhost.getHostAddress();
            System.out.println("IP Address of your machine: " + ip);
        } catch (UnknownHostException e) {
            System.err.println("Unable to determine the IP address of your machine: " + e.getMessage());
        }
    }
}

**Fibonacci**

public class Fibonacci {
    public static int calculateFibonacci(int n) {
        if (n <= 1) {
            return n;
        }
        return calculateFibonacci(n - 1) + calculateFibonacci(n - 2);
    }
}


--python

f=open("file.txt", "w")

p=input("enter name: ")

f.write("Hello \n")

f.writelines (p)

f.close()

f=open("file.txt","r+")

print("Output of Read function Is: ")

print (f.read())

print()

f.close()


